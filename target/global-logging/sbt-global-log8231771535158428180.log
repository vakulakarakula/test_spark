[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\svakulin\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\svakulin\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Azul Systems, Inc. Java 20.0.2)
[debug]       Load.loadUnit: plugins took 109.692ms
[debug]       Load.loadUnit: defsScala took 0.6666ms
[debug] [Loading] Scanning directory C:\Users\svakulin\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\svakulin\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.0361 ms
[debug]           Load.resolveProject(global-plugins) took 46.4857ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\svakulin\.sbt\1.0\plugins, plugins: List(<none>))) took 89.0757ms
[debug] [Loading] Done in C:\Users\svakulin\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 117.8247ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2087ms
[debug]     Load.loadUnit(file:/C:/Users/svakulin/.sbt/1.0/plugins/, ...) took 241.4307ms
[debug]   Load.apply: load took 426.9575ms
[debug]   Load.apply: resolveProjects took 5.6071ms
[debug]   Load.apply: finalTransforms took 57.0972ms
[debug]   Load.apply: config.delegates took 9.2413ms
[debug]   Load.apply: Def.make(settings)... took 497.3953ms
[debug]   Load.apply: structureIndex took 91.0086ms
[debug]   Load.apply: mkStreams took 2.0809ms
[info] loading global plugins from C:\Users\svakulin\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2411.0898ms
[debug]           Load.loadUnit: plugins took 24.661ms
[debug]           Load.loadUnit: defsScala took 0.0038ms
[debug] [Loading] Scanning directory C:\Users\svakulin\IdeaProjects\test_spark\project
[debug]             Load.loadUnit: mkEval took 5.3242ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\svakulin\IdeaProjects\test_spark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.3746 ms
[info] loading settings for project test_spark-build from idea.sbt ...
[debug]               Load.resolveProject(test_spark-build) took 6.0772ms
[debug]             Load.loadTransitive: finalizeProject(Project(id test_spark-build, base: C:\Users\svakulin\IdeaProjects\test_spark\project, plugins: List(<none>))) took 9.1589ms
[debug] [Loading] Done in C:\Users\svakulin\IdeaProjects\test_spark\project, returning: (test_spark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2412.0977ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.1845ms
[debug]         Load.loadUnit(file:/C:/Users/svakulin/IdeaProjects/test_spark/project/, ...) took 2445.1084ms
[debug]       Load.apply: load took 2447.2446ms
[debug]       Load.apply: resolveProjects took 0.1611ms
[debug]       Load.apply: finalTransforms took 12.6116ms
[debug]       Load.apply: config.delegates took 0.5519ms
[debug]       Load.apply: Def.make(settings)... took 101.9091ms
[debug]       Load.apply: structureIndex took 33.8693ms
[debug]       Load.apply: mkStreams took 0.0048ms
[info] loading project definition from C:\Users\svakulin\IdeaProjects\test_spark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3930.0135ms
[debug]     Load.loadUnit: defsScala took 0.0043ms
[debug] [Loading] Scanning directory C:\Users\svakulin\IdeaProjects\test_spark
[debug]       Load.loadUnit: mkEval took 0.5261ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.3197 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 44.5053ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\svakulin\IdeaProjects\test_spark, plugins: List(<none>))) took 50.2888ms
[debug] [Loading] Done in C:\Users\svakulin\IdeaProjects\test_spark, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2236.7556ms
[debug]     Load.loadUnit: cleanEvalClasses took 34.753ms
[debug]   Load.loadUnit(file:/C:/Users/svakulin/IdeaProjects/test_spark/, ...) took 6202.6881ms
[debug] Load.apply: load took 6205.3452ms
[debug] Load.apply: resolveProjects took 0.1636ms
[debug] Load.apply: finalTransforms took 29.7537ms
[debug] Load.apply: config.delegates took 0.368ms
[debug] Load.apply: Def.make(settings)... took 92.056ms
[debug] Load.apply: structureIndex took 25.8619ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to test_spark (in build file:/C:/Users/svakulin/IdeaProjects/test_spark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53961 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53961, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to test_spark (in build file:/C:/Users/svakulin/IdeaProjects/test_spark/)
[debug] > Exec(idea-shell, None, None)
